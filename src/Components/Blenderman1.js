/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 blenderman1.glb
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei";

function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/blenderman1.glb");
  const { actions } = useAnimations(animations, group);
  const texture = useTexture(props.texture);
  const bottomMaterial = materials["Bottommat.002"];

  useEffect(() => {
    nodes.Tops.morphTargetInfluences[1] = -props.topMorph / 10;
    nodes.Body.morphTargetInfluences[0] = props.bodyMorph / 10;
    nodes.Bottoms.morphTargetInfluences[0] = props.bottomMorph / 10;
    nodes.Hair.morphTargetInfluences[0] = props.hairMorph / 10;
    nodes.Shoes.morphTargetInfluences[0] = props.shoeMorph / 10;
    bottomMaterial.map = texture;
    if (props.action.prev && props.action.curr === 0) {
      actions[props.action.prev].stop();
    }
    if (props.action.prev) {
      actions[props.action.prev].stop();
    }
    if (props.action.curr) {
      actions[props.action.curr].play();
    }
  }, [
    props.action,
    actions,
    props.action.prev,
    bottomMaterial,
    texture,
    nodes.Body.morphTargetInfluences,
    nodes.Bottoms.morphTargetInfluences,
    nodes.Hair.morphTargetInfluences,
    nodes.Shoes.morphTargetInfluences,
    nodes.Tops.morphTargetInfluences,
    props.bodyMorph,
    props.bottomMorph,
    props.hairMorph,
    props.shoeMorph,
    props.topMorph,
  ]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
          position={[0, -2, 0]}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Eyelashes"
            geometry={nodes.Eyelashes.geometry}
            material={materials["Eyelashmat.002"]}
            skeleton={nodes.Eyelashes.skeleton}
          />
          <skinnedMesh
            name="Eyes"
            geometry={nodes.Eyes.geometry}
            material={materials["Bodymat.002"]}
            skeleton={nodes.Eyes.skeleton}
          />
          <skinnedMesh
            name="Body"
            geometry={nodes.Body.geometry}
            material={materials["Bodymat.002"]}
            skeleton={nodes.Body.skeleton}
            morphTargetDictionary={nodes.Body.morphTargetDictionary}
            morphTargetInfluences={nodes.Body.morphTargetInfluences}
            material-color={props.bodyColor}
          />
          <skinnedMesh
            name="Bottoms"
            geometry={nodes.Bottoms.geometry}
            material={materials["Bottommat.002"]}
            skeleton={nodes.Bottoms.skeleton}
            morphTargetDictionary={nodes.Bottoms.morphTargetDictionary}
            morphTargetInfluences={nodes.Bottoms.morphTargetInfluences}
            material-color={props.bottomColor}
          />
          <skinnedMesh
            name="Hair"
            geometry={nodes.Hair.geometry}
            material={materials["Hairmat.002"]}
            skeleton={nodes.Hair.skeleton}
            morphTargetDictionary={nodes.Hair.morphTargetDictionary}
            morphTargetInfluences={nodes.Hair.morphTargetInfluences}
            material-color={props.hairColor}
          />
          <skinnedMesh
            name="Shoes"
            geometry={nodes.Shoes.geometry}
            material={materials["Shoesmat.002"]}
            skeleton={nodes.Shoes.skeleton}
            morphTargetDictionary={nodes.Shoes.morphTargetDictionary}
            morphTargetInfluences={nodes.Shoes.morphTargetInfluences}
            material-color={props.shoeColor}
          />
          <skinnedMesh
            name="Tops"
            geometry={nodes.Tops.geometry}
            material={materials["Topmat.002"]}
            skeleton={nodes.Tops.skeleton}
            morphTargetDictionary={nodes.Tops.morphTargetDictionary}
            morphTargetInfluences={nodes.Tops.morphTargetInfluences}
            material-color={props.topColor}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/blenderman1.glb");
export default Model;
